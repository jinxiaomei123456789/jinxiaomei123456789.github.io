<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小生の博客</title>
  
  <subtitle>踏实努力地工作，踏实努力地学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-09T06:28:34.648Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>更换电脑的博客问题</title>
    <link href="http://yoursite.com/2019/01/09/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/09/更换电脑的博客问题/</id>
    <published>2019-01-09T06:27:29.000Z</published>
    <updated>2019-01-09T06:28:34.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> &emsp;&emsp;公司新发了一台笔记本，以往我还是使用自己的笔记本，某天，钟老师说：“你怎么不带公司发的笔记本，是不是嫌弃它比你的重？”说完阴险地笑了笑。组长听了这话，和颜悦色地对我说：“下次出项目还是统一一下电脑吧。”于是，这个星期我便换了新的电脑，新电脑上很多环境都要自己配，麻烦，但也权当是一个知识的回顾过程吧。首先，便是换电脑之后hexo博客如何继续更新的问题，以下是解决步骤。</p><h1 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h1><h2 id="NodeJs下载与环境配置"><a href="#NodeJs下载与环境配置" class="headerlink" title="NodeJs下载与环境配置"></a>NodeJs下载与环境配置</h2><p>&emsp;&emsp;在官网上下载NodeJs，一路next,选择安装地址时为D:\kit\node.js，完成后在cmd控制台中输入node -version提示node不是命令，这是因为在系统变量path中没有将D:\kit\node.js路径加进去，添加好之后再次输入还是无效，重新启动后成功，想来我自己的电脑是win7是不用重新启动的，而新电脑是win10，必须要重新启动。控制台中输入node -v显示如下信息说明安装成功。<br>！<a href="更换电脑的博客问题/node安装成功.jpg">node安装成功</a></p><h2 id="Git下载与配置"><a href="#Git下载与配置" class="headerlink" title="Git下载与配置"></a>Git下载与配置</h2><p>&emsp;&emsp;在官网上下载Git工具，安装步骤网上有很多，安装结束后，桌面点击鼠标右键，看到有下图说明安装成功。<br> ！<a href="更换电脑的博客问题/Git安装成功.jpg">Git安装成功</a></p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>&emsp;&emsp;在cmd窗口中输入<code>npm install hexo-cli -g</code>来安装hexo，结束后输入hexo -v可以查看安装是否成功。<br>！<a href="更换电脑的博客问题/hexo安装.jpg">hexo安装</a></p><h1 id="在GitHub官网上添加新电脑产生的秘钥"><a href="#在GitHub官网上添加新电脑产生的秘钥" class="headerlink" title="在GitHub官网上添加新电脑产生的秘钥"></a>在GitHub官网上添加新电脑产生的秘钥</h1><ul><li>1.首先配置Git的用户名和邮箱。<br>！<a href="更换电脑的博客问题/配置Git用户名和邮箱.jpg">配置Git用户名和邮箱</a><br>2.输入命令在电脑上生成新的SSH KEY。连续点击三次“enter”键。如果电脑上之前已经生成过SSH KEY，那么新的会覆盖旧的。<br>！<a href="更换电脑的博客问题/给电脑上生成SSH KEY.jpg">给电脑上生成SSH KEY</a></li></ul><ol start="3"><li>打开电脑，可以看到电脑上生成了两个秘钥，秘钥生成算法为RSA算法，第一个文件是私钥，自己保留，不能给旁人知道，下面一个pub文件是公钥，大家都可以知晓。<br>！<a href="更换电脑的博客问题/电脑生成公私钥.jpg">电脑生成公私钥</a></li><li>打开公钥文件，复制添加到GitHub官网上。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt; &amp;emsp;&amp;emsp;公司新发了一台笔记本，以往我还是使用自己的笔记本，某天，钟老师说：“你怎么不带公司发的笔记本，是不是嫌弃它比你的重
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="http://yoursite.com/2019/01/08/%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/01/08/网络/</id>
    <published>2019-01-08T13:03:33.000Z</published>
    <updated>2019-01-08T13:03:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ESXI填坑</title>
    <link href="http://yoursite.com/2019/01/07/ESXI%E5%A1%AB%E5%9D%91/"/>
    <id>http://yoursite.com/2019/01/07/ESXI填坑/</id>
    <published>2019-01-07T13:02:45.000Z</published>
    <updated>2019-01-08T13:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　前段时间听所里小哥聊天，整个测评部能够做渗透测试的只有旭哥一个人，惊讶得很，这几天便开始了我的渗透之路，遇上很多坑，记录如下，以防后面查缺补漏增加学习和工作效率。　　</p><hr><p>　　</p><h4>新建虚拟机后IP地址分配不对</h4><br>　　 在新建虚拟机后，分配到的IP地址为169开头或者是0.0.0.0，这是因为电脑中还有其他的虚拟网卡，禁用掉除此虚拟机之外的网卡再新建虚拟机地址即可分配正确，一般都是以192.168开头的IP地址。禁用网卡位置如下图。<br>　　 <img src="/2019/01/07/ESXI填坑/网卡干扰.jpg" alt="禁用多余网卡">　　 　　 <p></p><hr><p>　　</p><h4>虚拟机开机分配动态IP地址</h4><br>　　新建虚拟机结束后，使用客户端连接服务器，第一次成功，后来第二此重启服务器后再连接就失败了，这是因为虚拟机中IPV4设置中，有一项默认设置是：使用动态IP地址，我们需要把这一项修改为使用静态IP地址，按F2进入系统配置，详细设置见下图。<br>　　<img src="/2019/01/07/ESXI填坑/静态IP设置.jpg" alt="静态IP">　　　　<p></p><hr><p>  </p><h4>客户端连接报错</h4><br>  使用客户端连接报错：在服务器192.168.2.3上调用对象“ServiceInstance”的“ServiceInstance.RetrieveContent”失败。这个错误原因是因为虚拟机没有开启SSH功能。按F2进入系统配置后选择“Troubleshooting Mode Options”，进入后将关于ssh的设置为enabled即可，如下图。<br>  <img src="/2019/01/07/ESXI填坑/客户端不能正常连接.jpg" alt="ssh功能未开启"><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　前段时间听所里小哥聊天，整个测评部能够做渗透测试的只有旭哥一个人，惊讶得很，这几天便开始了我的渗透之路，遇上很多坑，记录如下，以防后面查
      
    
    </summary>
    
    
      <category term="ESXI" scheme="http://yoursite.com/tags/ESXI/"/>
    
  </entry>
  
  <entry>
    <title>课外拓展之电脑硬件</title>
    <link href="http://yoursite.com/2019/01/02/%E8%AF%BE%E5%A4%96%E6%8B%93%E5%B1%95%E4%B9%8B%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/02/课外拓展之电脑硬件/</id>
    <published>2019-01-02T06:17:13.000Z</published>
    <updated>2019-01-07T13:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　</p><h2 id="１-cpu"><a href="#１-cpu" class="headerlink" title="１.cpu"></a>１.cpu</h2><p>　　cpu在操作系统中用于做浮点运算。电脑cpu主要有两个品牌，intel和AMD。下面以intel某一产品介绍cpu的配置。</p><p> 　　1. cpu内核因素<br> 　　cpu架构：64位。如果自己的电脑是32位的系统，cpu为64位就不适用。<br>    核心数量：六核心。<br>    线程数量：12。线程数量刚好是核心数量的双倍，源于intel特有的技术：超线程，意思是在操作系统中一个核心可以当两个cpu来用。</p><p> 　　2. cpu频率<br> 　　主频：在预算范围内，主频越大越好。<br> 　　3. cpu插槽<br> 　　插槽类型：LGA 2011，不同的CPU有不同的插槽，插槽之间不通用。<br> 　　4. cpu技术<br> 　　超线程技术：支持。如前面所说的，如果支持超线程技术，一般都是线程数量是核心数量的两倍，目前还没有三倍技术。<br>     虚拟化技术：Intel VT。CPU之处虚拟化指定工具才能安装。<br> 　　5. cpu内存<br> 　　适用类型：台式机。指定内存安装在台式机还是笔记本。<br>     内存容量：8GB。<br>     内存类型:DDR3。内存类型还有其他，如DDR2，DDR4等，他们之间不同之处在于，在内存条从DDR2到DDR3到DDR4做升级时，修改缺口的位置不同，但主板上的总长度不变。缺口位置如下图所示。<br><img src="/2019/01/02/课外拓展之电脑硬件/内存类型.jpg" alt="内存条示例"><br> 　　6. 虚拟化<br> 　　虚拟化是指通过虚拟化技术将一台计算机虚拟化为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在互相独立的空间内运行而互不影响，从而显著提高工作效率。 　　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　&lt;/p&gt;
&lt;h2 id=&quot;１-cpu&quot;&gt;&lt;a href=&quot;#１-cpu&quot; class=&quot;headerlink&quot; title=&quot;１.cpu&quot;&gt;&lt;/a&gt;１.cpu&lt;/h2&gt;&lt;p&gt;　　cpu在操作系统中用于做浮点运算。电脑cpu主要有两个品牌，intel和AMD。下面以int
      
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>2019年计划</title>
    <link href="http://yoursite.com/2018/12/29/2019%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2018/12/29/2019年计划/</id>
    <published>2018-12-29T02:06:22.000Z</published>
    <updated>2018-12-29T02:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　转眼间已到了2018年的最后第三天，回首过去的一年，基本处于颠沛流离的状态。17年十月份找了一份安卓系统开发的工作，12月进部门之后几乎就没有了自己的生活，每天早上六点多起床，晚上几乎都在十点左右到家，一两点到家的也有几次，加班于当时的我来说是常事，时间全部奉献给了无数的客户需求、bug和版本维护，以及无休无止的patch。<br>　　以为这样的生活会锻炼出我在专业领域愈加丰富的经验，然而并没有达到预想的效果。跳槽的想法在公司开始产业转移时产生，手机已不是公司的新宠，人工智能才是未来社会发展的大方向。其次，伴随着产业转移带来的一系列矛盾渐渐浮出水面，员工人事调整以及财务危机渐渐摧垮了大家对工作的积极性，于是，在一个夜黑风高的时刻，我离职了。<br>　　11月份我来到了新公司，一家事业单位，新工作要求知识面广，需要和客户交流，这样的工作正好给我一个锻炼社交的机会，于是我决定在这里脚踏实地的干下去。<br>　　19年我的计划是考等级保护证书，元旦之后每天晚上回家有空了就去学习关于渗透的内容，计划明年年底将渗透学熟练。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　转眼间已到了2018年的最后第三天，回首过去的一年，基本处于颠沛流离的状态。17年十月份找了一份安卓系统开发的工作，12月进部门之后几乎就没有了自己的生活，每天早上六点多起床，晚上几乎都在十点左右到家，一两点到家的也有几次，加班于当时的我来说是常事，时间全部奉献给了无数
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>kali安装教程</title>
    <link href="http://yoursite.com/2018/12/26/kali%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/26/kali安装教程/</id>
    <published>2018-12-26T02:59:41.000Z</published>
    <updated>2018-12-26T07:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2 style="color:blue">前言</h2><br>　　五个月之前因为兴趣接触了kali，从安装到基本命令以及一些黑客常用技术算是系统过了一遍，然而，这段时间没有碰现在全部忘记了，连基本的安装不会。博客是一个好东西，督促我不断学习，之前对自己太自信了，总以为自己过目不忘，然而却被现实打倒，好记性不如烂笔头，算是对自己的一个教训了，现在深刻地认识到做技术写博客是多么重要的一件事，一来回顾，二来查缺补漏，最后也是对自己职业生涯的一种见证与规划吧。一位学长曾告诉我们学习要脚踏实地，苦口婆心的劝说我也没能听进去多少，工作了才意识到，下面就从最基本的安装开始，听过来人的话把地踩塌。　　<p></p><ol><li>打开vmware，一次选择“文件”-&gt;“新建虚拟机”，弹出以下界面，选择“典型”，点击“下一步”。<br><img src="/2018/12/26/kali安装教程/安装步骤1.jpg" alt="安装步骤1"></li><li>选择“稍后安装操作系统”，点击“下一步”。<br><img src="/2018/12/26/kali安装教程/安装步骤2.jpg" alt="安装步骤2"></li><li>下面的选项除了第一个是选择Linux，第二个我在安装过程中选择centos和ubuntu都可以。选择之后点击“下一步”。<br><img src="/2018/12/26/kali安装教程/安装步骤3.jpg" alt="安装步骤3"></li><li>这一步首先需要给你的虚拟机命名，下面一个就是设置新建虚拟机的存储位置，设置好之后点击“下一步”。接下来的步骤都是默认。<br><img src="/2018/12/26/kali安装教程/安装步骤4.jpg" alt="安装步骤4"></li><li>新建结束之后，需要配置系统镜像，鼠标放置在虚拟机上右击，点击“设置”。<br><img src="/2018/12/26/kali安装教程/安装步骤5.jpg" alt="安装步骤5"></li><li>选择CD/DVD这个选项，在右边”使用ISO镜像文件“中设置我们下载好的镜像文件，点击“确定”。<br><img src="/2018/12/26/kali安装教程/安装步骤6.jpg" alt="安装步骤6"><br>到目前为止虚拟机就新建好了，下面我们需要启动虚拟机，启动过程中会有一些系统设置。</li><li>鼠标放置在我们新建的虚拟机上，右击“电源”-&gt;“启动客户机”。出现图形界面，选择“Graphical install”，enter键。<br><img src="/2018/12/26/kali安装教程/安装步骤7.jpg" alt="安装步骤7"></li><li>选择语言“简体中文”。<br><img src="/2018/12/26/kali安装教程/安装步骤8.jpg" alt="安装步骤8"></li><li>选择“中国”，点击”继续“。<br><img src="/2018/12/26/kali安装教程/安装步骤9.jpg" alt="安装步骤9"></li><li>下面选择“汉语”。稍等一会儿出现主机名配置。配置好之后点击“继续”。<br><img src="/2018/12/26/kali安装教程/安装步骤10.jpg" alt="安装步骤10"></li><li>接下来是域名配置，直接跳过，enter键。<br><img src="/2018/12/26/kali安装教程/安装步骤11.jpg" alt="安装步骤11"></li><li>设置密码，这个密码就是开机密码，我设置为root。<br><img src="/2018/12/26/kali安装教程/安装步骤12.jpg" alt="安装步骤12"></li><li>选择第一个<br><img src="/2018/12/26/kali安装教程/安装步骤13.jpg" alt="安装步骤13"></li><li>选择如下：<br><img src="/2018/12/26/kali安装教程/安装步骤14.jpg" alt="安装步骤14"></li><li>下面的步骤直接默认，直到出现以下。选择“是”。<br><img src="/2018/12/26/kali安装教程/安装步骤15.jpg" alt="安装步骤15"></li><li>接着有一个漫长的等待过程。<br><img src="/2018/12/26/kali安装教程/安装步骤16.jpg" alt="安装步骤16"></li><li>然后会问你是否要选择网络镜像，如果你的网络很好可以选择是，这里呢我选择的否。都行的。接下来都是默认。<br><img src="/2018/12/26/kali安装教程/安装步骤17.jpg" alt="安装步骤17"></li><li>出现这一步选择“是”。<br><img src="/2018/12/26/kali安装教程/安装步骤18.jpg" alt="安装步骤18"></li><li>选择第二个。<br><img src="/2018/12/26/kali安装教程/安装步骤19.jpg" alt="安装步骤19"></li><li>出现这个的时候就说明安装结束了，点击继续现在开始你的黑客之旅吧。<br><img src="/2018/12/26/kali安装教程/安装步骤20.jpg" alt="安装步骤20"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h2 style=&quot;color:blue&quot;&gt;前言&lt;/h2&gt;&lt;br&gt;　　五个月之前因为兴趣接触了kali，从安装到基本命令以及一些黑客常用技术算是系统过了一遍，然而，这段时间没有碰现在全部忘记了，连基本的安装不会。博客是一个好东西，督促我不断学习，之前对自己太自信了
      
    
    </summary>
    
    
      <category term="kali" scheme="http://yoursite.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>与德工作记录</title>
    <link href="http://yoursite.com/2018/12/25/%E4%B8%8E%E5%BE%B7%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/12/25/与德工作记录/</id>
    <published>2018-12-25T01:56:51.000Z</published>
    <updated>2018-12-25T06:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　前两日在忙项目归档，今天得空回顾一下自己在与德工作一年以来的记录。与德访问控制这个方面做的很好，但还是屈服于互联网科技的迅速发展，大多数同事都使用有道云笔记来记录工作中遇到的问题以及学到的新知识，我也随了他们的习惯。</p><p><strong>1. 单编</strong><br>　　单编是指只编译一个模块，一般系统代码中具有.mk文件的都可以进行单编，结束后将单编后的apk等文件拷贝到版本通道，在push到手机中即可验证bug和feature是否修改成功。单编从整体上来说比make或者new编译节省大量时间，并且不用刷机验证，以下为单编步骤，以Launcher3为例：<br>　　首先：<code>source build/envsetup.sh</code><br>　　接着执行<code>lunch</code><br>　　然后选对应的版本<br>　　最后<code>mmma packages/apps/Launcher3</code>(使用mmma的权限比mmm的权限更大，它会编译到一些更加底层的库文件，有时候mmm不能成功的可能就是因为库文件没有找到，这时可以使用mmma来编)</p><hr><p><strong>2. 关于抓log</strong><br>　　通过adb抓取手机运行过程中生成的log，具体做法先把手机打开开发者模式，连接电脑，打开usb调试，如果我们想让生成的log在指定的位置，比如E盘，那么直接E: 接着在里面输入<code>adb logcat -v  time&gt;1.log</code>，这里的1.log就是生成的log文件的名称，按“Ctrl+C”终止抓log。</p><hr><p><strong>3. 关于解bug</strong><br>　　2018.7.27，截止现在，我解了快一个月的bug，之前在四部从来没有解过，这段时间的工作，让我增长了很多方面的知识，对于解bug，有了暂时的心得，记录下方便下次回顾。<br>　　真正意义上我开始解的第一个bug是手机设置中查看SIM卡信息，IMEI等信息时报<code>“com.android.phone&quot;</code>停止运行，组长过来询问我工作如何，我乘机问了一下他关于解bug的流程以及如何找到原因并解决这个bug。现在凭借我仅存的记忆记录如下。<br>　　首先，看到一个bug之后，先在自己的手机上刷最新的版本，验证是否会出现和测试那边描述的一样的现象，如果没有出现，可能是后期别人提交的代码没有合上去，导致测试那边不能通过，也可能是操作手法不对，在这种情况下，要和测试那边提出这个bug的小伙伴沟通。在肯定最新版本没有这个问题时，就关闭这个bug并且在下面备注“在某月某日验证通过，请在下个版本验证”。<br> 　　确定最新版本出现同样的现象之后，连接电脑抓log，之前一直用的是adb命令形式，<code>adb logcat -v  time&gt;1.log</code>，后来发现我自己的nodepad++安装了抓log的插件，点击就可以抓。抓完log之后分析。一般情况下，像这种程序异常结束的，我们搜索的关键字有<code>“exception”</code>、<code>“fail”</code>、<code>“crush”</code>等。搜索定位到具体的某个类的某个方法，接下来就开始看源码，修改。这个部分就要凭经验。今天成功改了一个bug之后，我认为首先要会猜某段代码究竟是干嘛的，安卓代码量100多G，这么大，不可能每段代码的含义，每个变量的含义我们都知道，在定位到具体方法后，大胆修改去尝试很重要。<br>　　在试用期间，我从对安卓系统开发的理论理解上升到现在的实际工作，从一开始的基础工作到现在学习如何解bug，每一项工作都学习到了很多知识和经验。<br>　　前期发版本过程中，最重要的心得就是要胆大细心，这项工作但凡有一点疏忽，花半天编的版本就有问题，其次，在编译版本之前要再三和这个项目的开发经理确认打patch的时间、gms包的版本、版本号以及修改点是否都是正确的，千万不能想当然，我因为这几个问题犯了几次错，给了我沉痛的教训，所以现在一有改需求后发版本的工作都战战兢兢。<br>　　合patch是一项锻炼人意志的工作，在这个过程中小心驶得万年船。再枯燥的工作也有可以学习的地方，因为合patch，我掌握和如何使用git提交、回退以及查看提交记录等。<br>　　解bug是一点一点积累经验的过程，从一开始连步骤都不会到现在可以独自解bug，这段时间经历了收获了很多，也经历了很多迷茫，在海军、组长、师父以及其他同事的帮助下，度过了这一段迷茫期。最重要的是定位问题，抓取了log之后，要搜索什么样的关键词去定位文件是解bug的敲门砖，这个只有通过经验来慢慢积累，其次，定位了问题之后，我不知道该如何修改，前辈们教我不知道如何修改的时候，要学会看代码猜含义，不懂的百度搜，百度内容可能不是很透彻，但是加入我们自己的理解代码就比较好懂了，这时大胆修改代码去验证自己的修改是否是正确的。<br>　　之前我每次修改完都remake编译一下去刷版本，但解bug时才发现，这样太浪费时间了，能够单编的尽量去单编，非常节省时间。<br>     关于单编，有时用mmm编译报错，显示大致意思是缺少文件，问了旁边的海军后才明白，mmm的权限比mmma的小，有的库文件编译需要用但是编译用mmma可以编译到更多的库文件。</p><hr><p><strong>4. git管理工具</strong><br>　　工作中学到最有用的便是git，只想说git的发明者是一个非常了不起的人,很感谢这段工作经验。<br>　　E628_O项目的提交步骤如下：<br>　　<code>git status .</code>  看修改了哪些文件，<br>　　如果有不需要提交的文件A，直接<code>rm -rf A</code>将文件A删除之后执行<code>git add .</code>　之后依次执行<code>git add .</code>和<code>.  git_ci.sh E628_GIG</code>，这一步就相当于<code>git commit .</code>操作，执行了这一步之后就不需要再执行commit了。<br>之后执行<code>repoc upload .</code>,有的也会用<code>repo upload .</code><br>　　提交到服务器上之后，如果发现有不需要提交或者提交错的文件，需回退代码，回退到刚刚修改完文件的状态，首先要看提交日志，查看提交日志使用<code>git log</code>,这里的回退是只有自己本地代码回退，不是服务器上的，使用<code>git reset  ffw2395742432</code>，执行完这一步，将不需要提交的文件删除，再执行<code>git add .</code>或者执行执行<code>git add 文件名</code>，提交顺序和上面一样。　　</p><hr><p><strong>5. Linux命令</strong><br>　　(1)查找文件<br>　　例如查找a.java这个文件，使用命令<code>find * -name &quot;a.java&quot;</code><br>　　(2)找某个文件中具体字段被哪些文件引用<br>　　<code>grep  --exclude &quot;colors.xml&quot; -rn &quot;badge_color&quot; ./</code><br>　　(3)更新代码：<code>更新代码git pull</code><br>　　(4)查看当前应用的包名:打开当前应用，手机开发者模式直接输入改命令<code>adb shell &quot;dumpsys window | grep mCurrentFocus&quot;</code></p><hr><p> <strong>6. 未接来电和未读短信等通知改成红色小图标</strong><br>　　在gerrit上面看了同事的提交记录，修改的是<code>packages/apps/Launcher3/res/values/colors.xml</code>文件中的<code>“badge_color”</code>和<code>“folder_badge_color”</code>这两个字段，将其修改为红色“#FF0033”。<br>　　使用<code>grep  --exclude &quot;colors.xml&quot; -rn &quot;badge_color&quot; ./</code> 在Launcher对应的目录下面搜索，发现这个字段在<code>IconPalette.java</code>函数<code>getBadgePalette()</code>中被引用，打开<br>　　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int badgeColor = resources.getColor(R.color.badge_color);</span><br><span class="line">if(badgeColor == Color.TRASPARENT)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">if(sBadgePalette==null)&#123;</span><br><span class="line">sbadgePalette = fromDominantColor(badgeColor,false);</span><br><span class="line">&#125;</span><br><span class="line">return sbadgePalette ;</span><br></pre></td></tr></table></figure></p><p>　　我对这段代码的理解就是，先获得定义好的颜色，判断，如果颜色是透明的（TRASPARENT），直接返回空，如果sBadgePalette（应该是类似画笔之类的对象）是也是空，那么，就根据我们获取到的颜色badgeColor去画，把它保存在sbadgePalette 对象中，最后返回此对象。<br>　　之后看这个函数在哪里被调用，在Launcher3目录下执行<code>grep  --exclude &quot;IconPalette.javal&quot; -rn &quot;getBadgePalette&quot; ./</code> ，出现了两个文件，一个<code>是PopupContainerWithArrow.java</code>的671行，打开看了一下，它被调用的地方在函数<code>&quot;updateNotificationHeader()&quot;</code>中，根据函数名，应该是更新通知头之类的含义，在这个函数中，大致含义应该是：如果通知界面和信息界面都不是空，说明有未接电话或者未读信息等通知，这时，就创建一个图标画笔，画笔的内容就是<code>getBadgePalette（）</code>的返回值，也就是我们定义的红色，即用红色画出一个图标，然后把图标显示在界面上。</p><p></p><hr><p> </p><p><strong>7. apk覆盖问题</strong><br>　　今天做的一个需求就是修改未接电话或者未读短信等通知的图标为红色，我修改的地方是<code>packages/apps/Launcher3</code>这个目录下面的<code>res/values/color.xml</code>文件，但是后来同事告诉我不能在这个地方修改，原因是MTK很多apk会被vendor目录下面的<code>packages/apps</code>覆盖。我的问题是，如何看一个apk究竟是packages下面的还是vendor下面的呢？主管告诉我可以通过查看编译生成的out目录的app名字来反推。比如本次修改的Launcher3,查看编译生成的apk名字是mtkLanucher3，在<code>packages/apps</code>下面，打开自己的Android.mk文件，属性<code>local_package_name:=Launcher3</code>,但是在vendor下面，这个属性值为mtkLanucher3,就是编译生成的out中的apk的名字。<br>　　其次就是编译生成的<code>out/system</code>下有一个app还有一个priv-app目录，他们的区别在与，后者是系统中重要的apk，如何将一个应用编译时生成到pri-app中呢？需要在Android.mk中做如下设置即可：<br><code>LOCAL_PRIVILEGED_MODULE := true</code>，如果是false就编译到app中。</p><p></p><hr><p> <strong>8. Android系统紧急号码</strong><br>　　 修改vendor目录下面的<code>ecc_list.xml</code>文件，将我们需要添加的号码加进去，如添加112为紧急号码：<code>&lt;EccEntry Ecc=&quot;112&quot; Category=&quot;0&quot; Condition=&quot;0&quot;/&gt;</code>添加参数condition时，0表示在无卡的时候当紧急号码，1表示始终当紧急号码，2表示洁面霜显示成紧急号码但是实际是以普通方式拨出。</p><hr><p> <strong>9. Android系统设置中移除短信通知</strong><br> 　　控件的移除要通过父控件来移除<br>　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(enabled)</span><br><span class="line"> ((PreferenceCategory)findPreference(KEY_SIM_ACTIVITIES)).removePreference(findPreference(KEY_SMS))；</span><br></pre></td></tr></table></figure></p><p>　　这段代码在<code>vendor/mediatek/proprity/packages/apps/MtkSetting/Sim</code>下面，打开这个文件之后，找到<code>updateSmsValues()</code>函数，函数分析下：<br>（1）<code>final Preference simPref = findPreference(KEY_SMS)</code>这里需要注意的是<code>Preference</code>是一种布局，这句话的含义就是，找到<code>KEY_SMS</code>这个字段的布局赋给<code>simPref</code> 。<br>（2）找<code>KEY_SMS</code>布局在什么地方，在s<code>ource insight</code>中ctrl并点击这个变量，发现在<code>SimSettings.java</code>函数中定义的位置，得知它保存的字符串是<code>&quot;sim_sms&quot;</code>，如何找<code>“sim_sms”</code>在哪里被定义呢？方法：鼠标放置在<code>“sim_sms”</code>上，按<code>“ctrl+/”</code>点击确定，等搜索结果出来了之后点击前面的符号就能进入被定义的地方，这里我们看到的是改布局在<code>Sim_setting.xml</code>文件中被定义，点开，看到<code>sim_sms</code>是一个<code>preference</code>的<code>key</code>，通过这个<code>key</code>和<code>findprefrence(key)</code>就能找到该布局。搜索这个布局的<code>@string</code>，看到该布局表示的是“短信”。</p><hr><p> <strong>10. java序列化</strong><br> 在公司电脑上安装开发软件以及配置环境，电脑内存只有4G，非常卡，无情吐槽……<br> 1.下载工具<br>　　工具选择intelliJ IDEA，打开官网下载最新版本的2018.1.5，一共有两个版本，一个是ultimate还有一个是community，之前也听过分为商业版和社区版，但是因为下载成功了也没有特别注意区别。第一次下载的是community这个版本，但是在配置tomcat的时候发现没有tomcat server这个选项，正确的是下载的时候选择ultimate商业版。<br>2.java序列化代码<br>　　注意点：序列化的类实现serializeble接口。<br><code>ObjectOuptPutStream</code>用于对象的读出流，在序列化的时候，首先实例化一个对象，再创建一个.txt文本用于保存序列化的对象。<code>ObjectInputStream</code>用于对象的读入流。<br>具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.aust.serializable;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by jinxiaomei on 2018/7/5</span><br><span class="line"> */</span><br><span class="line">public class serializableTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">            serializeStudent();</span><br><span class="line">            Student student = deSerializaStudent();</span><br><span class="line">            System.out.printf(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void serializeStudent() throws  Exception&#123;</span><br><span class="line">        Student stu1 = new Student();</span><br><span class="line">        stu1.setId(1);</span><br><span class="line">        stu1.setName(&quot;jinxiaoemi&quot;);</span><br><span class="line">        stu1.setPwd(&quot;123456&quot;);</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&quot;E:/doc/serialize.txt&quot;)));</span><br><span class="line">        oos.writeObject(stu1);</span><br><span class="line">        System.out.printf(&quot;Student序列化成功！&quot;);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Student deSerializaStudent() throws Exception&#123;</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;E:/doc/serialize.txt&quot;)));</span><br><span class="line">        Student stu2 = (Student) ois.readObject();</span><br><span class="line">        System.out.printf(&quot;Student反序列化成功&quot;);</span><br><span class="line">        return stu2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　前两日在忙项目归档，今天得空回顾一下自己在与德工作一年以来的记录。与德访问控制这个方面做的很好，但还是屈服于互联网科技的迅速发展，大多数同事都使用有道云笔记来记录工作中遇到的问题以及学到的新知识，我也随了他们的习惯。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 单编&lt;/stro
      
    
    </summary>
    
    
      <category term="android 系统" scheme="http://yoursite.com/tags/android-%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>微盟项目总结</title>
    <link href="http://yoursite.com/2018/12/20/%E5%BE%AE%E7%9B%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/20/微盟项目总结/</id>
    <published>2018-12-20T08:15:28.000Z</published>
    <updated>2018-12-24T05:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　1.使用腾讯云的客户，一般<strong>主机</strong>使用的防恶意代码软件为腾讯云主机产品：<strong>云镜</strong>，云镜为用户提供黑客入侵检测和漏洞风险预警等安全防护服务，主要包括密码破解拦截、异常登录提醒、木马文件查杀、高危漏洞检测等安全功能，解决当前服务器面临的主要网络安全风险，帮助企业构建服务器安全防护体系，防止数据泄露。<br>　　云镜有两个版本，分别为基础防护和专业防护，访谈时需问清楚客户使用的是哪个版本。<br>    具体版本差异腾讯官网有如下介绍，专业防护比基础防护拥有更多的功能。<br>    <img src="/2018/12/20/微盟项目总结/云镜.jpg" alt="主机产品-云镜版本差异"><br>　　<br>　　２.<strong>zabbix</strong>是分布式开源监控系统，主要是对<strong>服务器</strong>资源进行监控，默认的用户名为admin,密码是zabbix。监控内容包括CPU负荷、内存使用、磁盘使用、网络状况、端口监视、日志监视。在监控值达到设定阀值时提供报警，在访谈时，需询问客户使用何种方式进行报警。它和云镜的区别在于，云镜在发现入侵行为时会做出拦截等动作，但zabbix主要功能是监控。<br>　　<br>　　3.<strong>WAF</strong>是web应用防火墙，作为<strong>网络防恶意代码产品</strong>使用。测评项中有一项为“主机防恶意代码产品与网络防恶意代码产品是否具有不同的恶意代码库”，这个主要看产品是否相同，例如：客户主机防恶意代码产品使用的是腾讯云的云镜，网络防恶意代码产品使用WAF，则恶意代码库就不相同。<br>　　<br>　　4.堡垒机作用是它切断了终端计算机对网络和服务器资源的直接访问，采用协议代理的方式，接管了终端计算机对网络和服务器的访问。形象地说，终端计算机对目标的访问，均需要经过堡垒机的翻译。打了一个比方，堡垒机扮演着看门者的工作，所有对网络设备和服务器的请求都要从这扇大门经过。因此堡垒机能够拦截非法访问和恶意攻击，对不合法命令进行命令阻断，过滤掉所有对目标设备的非法访问行为，保障企业数据安全。<br>　　堡垒机的双因子登录为：用户输入堡垒机的用户名和密码，接着点击收到验证码，这时用户会收到一串验证码，填写正确方可登录成功。询问时需注意：询问堡垒机的厂商，部署方式，验证码以何种方式发送（短信或者微信）以及验证码的组成部分。　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　1.使用腾讯云的客户，一般&lt;strong&gt;主机&lt;/strong&gt;使用的防恶意代码软件为腾讯云主机产品：&lt;strong&gt;云镜&lt;/strong&gt;，云镜为用户提供黑客入侵检测和漏洞风险预警等安全防护服务，主要包括密码破解拦截、异常登录提醒、木马文件查杀、高危漏洞检测等安全功能
      
    
    </summary>
    
    
      <category term="云镜 WAF zabbix" scheme="http://yoursite.com/tags/%E4%BA%91%E9%95%9C-WAF-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>测试图片</title>
    <link href="http://yoursite.com/2018/12/14/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/12/14/测试图片/</id>
    <published>2018-12-14T08:36:18.000Z</published>
    <updated>2018-12-25T01:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/14/测试图片/hexo-first.jpg" alt="测试图片"><br>步骤：在hexo下执行：npm install hexo-asset-image –save（已经执行过了，之后的不需要再执行这一步，只需要执行hexo n “博客名”）;<br>运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹；<br>将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：<img src="/2018/12/14/测试图片/上传图片语法.jpg" alt="上传图片语法"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/14/测试图片/hexo-first.jpg&quot; alt=&quot;测试图片&quot;&gt;&lt;br&gt;步骤：在hexo下执行：npm install hexo-asset-image –save（已经执行过了，之后的不需要再执行这一步，只需要执行hexo n 
      
    
    </summary>
    
    
      <category term="测试图片" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 脚本学习</title>
    <link href="http://yoursite.com/2018/12/07/Linux-Shell-%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/12/07/Linux-Shell-脚本学习/</id>
    <published>2018-12-07T01:21:14.000Z</published>
    <updated>2018-12-26T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　Linux相关知识在大三学的，迄今为止因为工作需要以及个人心血来潮断断续续学了一部分，导致现在对Linux只知命令，其他理解都不透彻。学习原因在于目前工作发现和Linux还是要经常打交道，在客户现场询问时客户输入的命令以及展示的内容都不懂！尴尬。。。。。。现在就利用闲暇时间，系统学习一遍，参考书籍为《Linux命令行与shell脚本编程大全第三版》</p><p><hr><br>@[TOC]目录</p><h1 id="1-基本的bash-shell命令"><a href="#1-基本的bash-shell命令" class="headerlink" title="1.基本的bash shell命令"></a>1.基本的bash shell命令</h1><p>##1.1系统用户<br>/etc/passwd 文件中包含着系统中所有账户列表以及每个账户的配置信息，示例如下：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　Linux相关知识在大三学的，迄今为止因为工作需要以及个人心血来潮断断续续学了一部分，导致现在对Linux只知命令，其他理解都不透彻。学习原因在于目前工作发现和Linux还是要经常打交道，在客户现场询问时客户输入的命令以及展示的内容都不懂！尴尬。。。。。。现在就利用闲暇
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>熊猫项目总结</title>
    <link href="http://yoursite.com/2018/12/06/%E7%86%8A%E7%8C%AB%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/06/熊猫项目总结/</id>
    <published>2018-12-06T01:08:51.000Z</published>
    <updated>2018-12-24T05:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.Linux普通用户切换到超级用户root:su - root接着会提示输入root的密码，正确即可进入。<br>同样，切换到普通用户:su - jin(用户名)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.Linux普通用户切换到超级用户root:su - root接着会提示输入root的密码，正确即可进入。&lt;br&gt;同样，切换到普通用户:su - jin(用户名)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>信息安全之主机测评过程中遇到的linux命令</title>
    <link href="http://yoursite.com/2018/11/30/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B9%8B%E4%B8%BB%E6%9C%BA%E6%B5%8B%E8%AF%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/11/30/信息安全之主机测评过程中遇到的linux命令/</id>
    <published>2018-11-30T07:36:15.000Z</published>
    <updated>2018-12-24T05:42:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Linux主机</strong><br>1.查看linux密码文件内容<br>（1）cat /etc/passwd  此命令输出的口令是“x”，已被映射到/etc/shadow文件中。若没有X则表明没有设置密码。<br>（2）cat /etc/shadow<br>此命令能查看详细的密码。密码已被加密。<br>综合上面两个命令，我在kali系统中设置密码为空时依然存在”x”,所以还是直接使用cat /etc/shadow更加直观看出有没有密码存在。</p><p>2.hexo创建新博客：hexo new “新文章”<br>提交步骤：hexo g、hexo s、hexo d</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Linux主机&lt;/strong&gt;&lt;br&gt;1.查看linux密码文件内容&lt;br&gt;（1）cat /etc/passwd  此命令输出的口令是“x”，已被映射到/etc/shadow文件中。若没有X则表明没有设置密码。&lt;br&gt;（2）cat /etc/shadow&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用户登录注册模块</title>
    <link href="http://yoursite.com/2018/03/18/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/03/18/用户登录注册模块/</id>
    <published>2018-03-18T12:24:43.000Z</published>
    <updated>2018-03-18T12:24:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>毕业设计——day01</title>
    <link href="http://yoursite.com/2018/03/18/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/03/18/毕业设计/</id>
    <published>2018-03-18T11:48:44.000Z</published>
    <updated>2018-12-25T01:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>计划</strong><br>　　１.任务：用户登录及注册<br>　　２.时间：2018.3.18-2018.3.24<br>　　<br><strong>步骤</strong><br>　　１.很长时间没有接触到做网站的知识，好多操作都忘记了，重新开始学习。４月２０号要交代码啊！！！烦人！！！！！！不想这么快就打开电脑，为了生活还是好好敲吧。<br>　　我追崇成功之后的成就感，却对失败时无力的自己深恶痛绝。</p><p>2.先做了学生登录这一模块，在一般的学校中，学生只要入学账号自动存在，所以对于学生来说他们不需要去注册，只需要登录账号和修改密码，这里对应的数据库操作是select和update。学生登录模块，如何将学生输入的数据提交到后台controller中，之前我的方法是使用ajax提交，这个好处是可以在输入用户名的时候就可以检验出用户名是否被占用，但是在后台返回页面时，由于form表单的提交固定，所以两个页面会覆盖，故舍弃了使用ajax同步验证的方法，用了普通的表单提交，action=”${pageContext.request.contextPath}/StudentLogin”，controller中代码：<br> @RequestMapping(value = “StudentLogin”,method = RequestMethod.POST)<br>    public ModelAndView StudentLogin(HttpServletRequest request, HttpSession session, STU_PASSWD stu_passwd) throws IOException{<br>        String STU_NUM = stu_passwd.getSTU_NUM();<br>        String PASSWD = stu_passwd.getPASSWD();<br>        System.out.println(studentPdService.StudentLogin(STU_NUM,PASSWD));</p><pre><code>System.out.println(STU_NUM+PASSWD);ModelAndView mav1 = new ModelAndView();if(studentPdService.StudentLogin(STU_NUM,PASSWD)!=0){    System.out.println(&quot;成功&quot;);    mav1.setViewName(&quot;FirstPageForStudent&quot;);}else{    System.out.println(&quot;失败&quot;);    mav1.setViewName(&quot;StudentLoginFailed&quot;);}System.out.println(mav1);return mav1;</code></pre><p>   controller参数是一个学生用户名密码对象，使用getter方法获得参数。注意的一点是，在form表单的input中，name的属性要和javabean中的保持一致，否则获取的参数值是null.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;计划&lt;/strong&gt;&lt;br&gt;　　１.任务：用户登录及注册&lt;br&gt;　　２.时间：2018.3.18-2018.3.24&lt;br&gt;　　&lt;br&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;br&gt;　　１.很长时间没有接触到做网站的知识，好多操作都忘记了，重新开始学习。４
      
    
    </summary>
    
    
      <category term="毕设" scheme="http://yoursite.com/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://yoursite.com/2017/10/24/%E6%97%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/24/无题/</id>
    <published>2017-10-24T15:01:03.000Z</published>
    <updated>2017-10-24T15:05:40.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="无题" scheme="http://yoursite.com/tags/%E6%97%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>shiro学习一</title>
    <link href="http://yoursite.com/2017/10/13/shiro%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2017/10/13/shiro学习一/</id>
    <published>2017-10-13T14:17:42.000Z</published>
    <updated>2017-10-13T14:17:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssm-restful接口</title>
    <link href="http://yoursite.com/2017/10/08/ssm-restful%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2017/10/08/ssm-restful接口/</id>
    <published>2017-10-08T08:57:57.000Z</published>
    <updated>2018-12-24T05:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>功能</strong><br>　　1.jar包使用maven管理<br>　　2.基于ssm+spring boot框架，实现对腾讯云数据库的增删改查。<br>　　3.对外提供API接口，接口类型restful。<br>　　<br><strong>个人理解</strong><br>在这个项目中，一开始并不知道什么是API接口，查了资料明白了一点。<br>　　１.什么是rest?<br>　　用URL定位资源，用HTTP描述操作。即就是选择通过使用http协议和uri,利用client/sersver model对资源镜子那个CRUD操作。<br>　　2.rest风格的好处？<br>　　客户端服务端分离。<br>　　无状态：就是从客户端的每个请求要包含服务器所需要的所有信息。<br>　　分层。</p><p><strong>项目搭建步骤</strong><br>　　step1:使用IDEA搭建一个spring boot项目：file-&gt;new project-&gt;Spring Initializr-&gt;next-&gt;next-&gt;web-&gt;next-&gt;finish。<br>　　<br>　 step2:给新建的项目java文件加设置成源文件。<br>　<br>　 step3:在pom.xml文件中添加相应的依赖包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.jin&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ssm-restful&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;ssm-restful&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--新增所需依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>step4:在application.properties文件中配置数据库以及对象和数据库的映射文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://47.93.221.55:3306/lesson1</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=Xt124104</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">mybatis.mapper-locations=classpath*:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.jin.ssmrestful.pojo</span><br></pre></td></tr></table></figure></p><p>step5:实体类文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.jin.ssmrestful.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>step6:接口(以查询所有用户为例)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.jin.ssmrestful.mapper;</span><br><span class="line"></span><br><span class="line">import com.jin.ssmrestful.pojo.User;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    /*查询所有用户*/</span><br><span class="line">    List&lt;User&gt; userList();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>step7:编写UserMapper.xml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.jin.ssmrestful.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;userMap&quot; type=&quot;com.jin.ssmrestful.pojo.User&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;userList&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">        select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>step8:编写controller.java控制器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.jin.ssmrestful.controller;</span><br><span class="line"></span><br><span class="line">import com.jin.ssmrestful.mapper.UserMapper;</span><br><span class="line">import com.jin.ssmrestful.pojo.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/*@RestController注解说明他是一个rest风格的接口，返回json*/</span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    /*controller控制器中需要注入UserMapper,这里省了service</span><br><span class="line">    * 层，直接调用接口中的方法*/</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    /*查询所有用户*/</span><br><span class="line">    @RequestMapping(value = &quot;/ssm-restful/userList&quot;)</span><br><span class="line">    public List&lt;User&gt; userList()&#123;</span><br><span class="line">        return userMapper.userList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>step9:启动，地址栏输入：localhost:8080/ssm-restful/userList,页面返回的是json串。</p><p>总结点：<br> （1）在上面的代码中，UserMapper.java文件中会报错，缺少bean,那么这个地方，我们实际上是少了一个注解，在mapper类名上加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> （2）在mybatis配置文件中，mapper标签中的namespace属性一定要写。映射文件中的namespace是用于绑定Dao接口的，即面向接口编程。</span><br><span class="line"></span><br><span class="line">step10：根据id查询用户</span><br><span class="line">UserMapper.java文件中添加一个抽象方法</span><br></pre></td></tr></table></figure></p><p> /<em>根据id查询用户</em>/<br>    User findUserById(int id);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath下面的mapper目录下面的Usermapper.xml文件中需要添加mabatis的查询误操作</span><br></pre></td></tr></table></figure></p><pre><code>&lt;!--根据id查询用户--&gt;&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;User&quot;&gt;    select * from user where id = #{id}&lt;/select&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller文件找那个添加逻辑处理方法</span><br></pre></td></tr></table></figure><pre><code>/*根据id查询用户*/@RequestMapping(value = &quot;/aliyun/findUserById&quot;,method = RequestMethod.GET)public User findUserById(@Param(&quot;id&quot;) int id){    return userMapper.findUserById(id);}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动项目，在地址栏输入你想查询的用户id，例如：localhost:8080/aliyun/findUserById?id=1，浏览器中会返回以Json形式的id为1的用户的信息。</span><br><span class="line">**注意**：在处理这个id的时候，我使用的是@Param(&quot;id&quot;)形式的参数绑定，后来换了一种方式：@PathVariable(&quot;id&quot;),仅仅替换了这个是不能成功的，我们还需要在地址映射的url上面添加我们的参数id，所以，完整的第二种方法应该是：</span><br></pre></td></tr></table></figure><p>/<em>根据id查询用户</em>/<br>    @RequestMapping(value = “/aliyun/findUserById/{id}”,method = RequestMethod.GET)<br>    public User findUserById(@PathVariable(“id”) int id){<br>        return userMapper.findUserById(id);<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在这种方法下，访问时输入的地址也会有所变化，根据@RequestMapping中的value值，我们知道，在访问id为1这个用户的时候，只需要以下形式的输入：localhost:8080/aliyun/findUserById/1</span><br><span class="line"></span><br><span class="line">step11:新增用户</span><br><span class="line">UserMapper.java文件中添加如下代码：</span><br></pre></td></tr></table></figure></p><p> /<em>增加用户</em>/<br>    void addUser(String username,String password);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper目录下面的UserMapper.xml文件中添加如下代码</span><br></pre></td></tr></table></figure></p>   <!--增加用户--><pre><code>&lt;insert id=&quot;addUser&quot; parameterType=&quot;String&quot;&gt;    insert into user(username,password) values(#{0},#{1})&lt;/insert&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller控制器中添加如下代码</span><br></pre></td></tr></table></figure><p> /<em>增加用户</em>/<br>    @RequestMapping(value = “aliyun/addUser”,method = RequestMethod.GET)<br>    public void addUser(@Param(“username”) String username,@Param(“password”) String password){<br>        User user = new User();<br>        user.setUsername(username);;<br>        user.setPassword(password);<br>        userMapper.addUser(username,password);<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　运行测试时输入以下形式的网址：http://localhost:8080/aliyun/addUser?username=jin&amp;password=123456789</span><br><span class="line">　　在新增用户信息的时候，有两个地方需要注意一下。</span><br><span class="line">　　（１）mybatis的映射文件中，插入操作写```insert into user(username,password) values(#&#123;username&#125;,#&#123;password&#125;)```这样的方式是不可以的，mybatis不能匹配，正确的方式，是将后面的两个参数分别用0和1 替换。</span><br><span class="line">　　（2）在controller文件中，我们接受参数的时候使用第一张就不可以了，应该使用@Param()，其次，新增用户的时候，我们必须新建一个用户对象，这时这个对象就拥有username和password属性，将我们新增的用户名和密码分别使用它们的set方法为它们赋值。但是，不新增直接使用```userMapper.addUser(username,password);```也可以。</span><br><span class="line">　　</span><br><span class="line">step12:更新用户</span><br><span class="line">UserMapper.java文件中添加如下代码：</span><br></pre></td></tr></table></figure></p><p>  /<em>更新用户信息</em>/<br>    void updateUser(User user);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper目录下面的UserMapper.xml文件中添加如下代码：</span><br></pre></td></tr></table></figure></p>  <!--修改用户信息--><pre><code>&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;    update user set username=(#{username}),password=(#{password}) where id = #{id}&lt;/update&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller控制器中添加如下代码：</span><br></pre></td></tr></table></figure><p> /<em>修改用户</em>/<br>    @RequestMapping(value = “/aliyun/updateUser/{id}”,method = RequestMethod.GET)<br>    public void updateUser(@PathVariable(“id”) int id,@Param(“username”) String username,@Param(“password”) String password){<br>        User user = new User();<br>        user.setId(id);<br>        user.setPassword(password);<br>        user.setUsername(username);<br>        userMapper.updateUser(user);<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">访问路径如下所示：http://localhost:8080/aliyun/updateUser/1?username=apple1&amp;password=1</span><br><span class="line">　　修改用户信息和新增类似，controller中都需要新建一个用户，当然，这种方式是在新增的时候以user为参数的前提下，也可以分开来。</span><br><span class="line">　　</span><br><span class="line">step13：根据id删除用户 </span><br><span class="line">Usermapper.java文件如下：</span><br></pre></td></tr></table></figure></p><p> /<em>根据id删除用户</em>/<br>    void deleteUser(int id);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper目录下面的usermapper.xml文件如下：</span><br></pre></td></tr></table></figure></p>  <!--根据id删除用户--><pre><code>&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;    delete from user where id = #{id}&lt;/delete&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller控制器中的代码如下：</span><br></pre></td></tr></table></figure><pre><code>/*根据id删除用户*/@RequestMapping(value = &quot;/aliyun/deleteUser/{id}&quot;,method = RequestMethod.GET)public void deleteUser(@PathVariable(&quot;id&quot;) int id){     userMapper.deleteUser(id);}</code></pre><p><code>`</code><br><strong>以上便是所有的功能实现</strong><br>　　注意：在写接口名时，接口名和控制器的方法名以及userMapper.xml文件中对应的sql语句的id应该保持一致。<br>　　查询所有用户的时候用resultMap返回集合，根据id查询时也是，新增用户和修改用户的时候参数形式是String或者是User。<br>　　mapper标签的namespace属性要写上去。namespace用于绑定dao接口，表示面向接口编程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;br&gt;　　1.jar包使用maven管理&lt;br&gt;　　2.基于ssm+spring boot框架，实现对腾讯云数据库的增删改查。&lt;br&gt;　　3.对外提供API接口，接口类型restful。&lt;br&gt;　　&lt;br&gt;&lt;strong&gt;个人理解&lt;/
      
    
    </summary>
    
    
      <category term="restful" scheme="http://yoursite.com/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>IDEA搭建ssm项目详解</title>
    <link href="http://yoursite.com/2017/10/08/IDEA%E6%90%AD%E5%BB%BAssm%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/08/IDEA搭建ssm项目详解/</id>
    <published>2017-10-08T07:14:20.000Z</published>
    <updated>2018-12-24T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要回顾之前做过的关于ssm项目的过程，顺便复习。</p><p><strong>步骤如下</strong><br>　　step1:使用IDEA创建一个maven webapp项目，名称为test-ssm。<br>　　<br>　　step2:建立数据库和表,数据库名称how2java,表名category_。<br>　　<br>　　step3:在项目中的pom.xml文件中加入我们需要的依赖文件。这些文件可以在阿里云的maven仓库中找到，地址：<a href="http://maven.aliyun.com/nexus/。" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/。</a><br>　　pom.xml文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;!-- 设置项目编码编码 --&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;!-- spring版本号 --&gt;</span><br><span class="line">    &lt;spring.version&gt;4.3.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;!-- mybatis版本号 --&gt;</span><br><span class="line">    &lt;mybatis.version&gt;3.4.1&lt;/mybatis.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;7.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 单元测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 实现slf4j接口并整合 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- JSON --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.8.7&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- MyBatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis/spring整合包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><p>　　step4：在项目中的java文件下建立包:cn.itcast.pojo,在这个包中建立类Category.java,这个包中存放项目中需要使用的实体类,该项目的实体类文件如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.pojo;</span><br><span class="line"></span><br><span class="line">public class Category &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Category&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实体类中有两个字段id,name,分别实现他们的getter和setter方法以及tostring方法。</p><p>　　step5:在项目的java文件夹下面建立包cn.itcast.mapper，在该包下面建立接口CategoryMapper.java,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.mapper;</span><br><span class="line"></span><br><span class="line">import cn.itcast.pojo.Category;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface CategoryMapper &#123;</span><br><span class="line">    /*增加功能*/</span><br><span class="line">    public void add(Category category);</span><br><span class="line"></span><br><span class="line">    /*删除功能*/</span><br><span class="line">    public void delete(int id);</span><br><span class="line"></span><br><span class="line">    /*根据id查找功能*/</span><br><span class="line">    public Category get(int id);</span><br><span class="line"></span><br><span class="line">    /*更新功能*/</span><br><span class="line">    public void update(Category category);</span><br><span class="line"></span><br><span class="line">    /*显示所有功能*/</span><br><span class="line">    public List&lt;Category&gt; list();</span><br><span class="line"></span><br><span class="line">    /*显示总记录功能*/</span><br><span class="line">    public int count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　step6:在项目的resources文件夹下面建立目录mapper,在这个目录下建立Category.xml文件，这个文件的作用mybatis文件，用于映射实体类和数据库中的字段，并且进行相应的增删改查操作。具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.itcast.mapper.CategoryMapper&quot;&gt;</span><br><span class="line">    &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt;</span><br><span class="line">        insert into category_ ( name ) values (#&#123;name&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt;</span><br><span class="line">        delete from category_ where id= #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;</span><br><span class="line">        select * from   category_  where id= #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt;</span><br><span class="line">        update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt;</span><br><span class="line">        select * from   category_</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>　　step7:在项目的java文件夹下面建立包cn.itcat.service，建立接口CategoryService.java,该层的主要作用是业务层，即真真需要实现的功能。本项目中我们只实现显示所用用户的功能，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.service;</span><br><span class="line"></span><br><span class="line">import cn.itcast.pojo.Category;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface CategoryService &#123;</span><br><span class="line">    List&lt;Category&gt; list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　step8:在第七步建立的service包下建立impl目录，新建CategoryServiceImpl.java文件，这个文件的主要作用是实现之前创建的接口。代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.service.impl;</span><br><span class="line"></span><br><span class="line">import cn.itcast.mapper.CategoryMapper;</span><br><span class="line">import cn.itcast.pojo.Category;</span><br><span class="line">import cn.itcast.service.CategoryService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class CategoryServiceImpl implements CategoryService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryMapper categoryMapper;</span><br><span class="line">    public List&lt;Category&gt; list() &#123;</span><br><span class="line">        return categoryMapper.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们这里使用到了注解，由于是service层，所以我们在类的上面添加注解@Service,这样在项目运行的时候，根据配置扫描到我们的service，在service层需要用到之前创建的接口，我们我们需要注入接口，使用注解： @Autowired。</p><p>　　step9:上面这些都是简单的逻辑实现，下面我们需要进行配置，ssm主要就是要进行配置，首先，我们从项目的web.xml文件开始。先上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--Spring 配置文件--&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">  &lt;/listener&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--</span><br><span class="line">  1.首先浏览器上访问路径/listCategory</span><br><span class="line">  2.tomcat根据web.xml上的配置信息，拦截到了/listCategory,</span><br><span class="line">  并将其交由DispatcherServlet处理</span><br><span class="line">  3.DisppatcherServlet根据springMVC的配置，将这次请求交由</span><br><span class="line">  CategoryController类处理，所以需要进行这个类的初始化、、</span><br><span class="line">  4.在实例化categoryController的时候，注入categoryServiceImpl</span><br><span class="line">  5.在实例CategoryServiceImpl的时候，注入 CategoryMapper</span><br><span class="line">  6.根据applicationContext.xml文件中的配置信息，将CategoryMapper</span><br><span class="line">  和Category.xml文件关联</span><br><span class="line">  7.这样拿到了实例化好的 CategoryController，并调用listCategory</span><br><span class="line">  方法</span><br><span class="line">  8.在listCategory方法中，访问categoryService，并获取数据，并把数据放在</span><br><span class="line">  &quot;cs&quot;上，接着服务端调转到listCategory.jsp去</span><br><span class="line">  9.最后在litcategory.jsp中显示数据</span><br><span class="line">  --&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--配置springmvc核心过滤器dispathcerservlet--&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--spring mvc的配置文件--&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><p>　　step10:spring的配置文件applicationContext.xml文件，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=&quot;cn.itcast.service&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot;&gt;</span><br><span class="line">            &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot;&gt;</span><br><span class="line">            &lt;value&gt;jdbc:mysql://localhost:3306/how2java&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;user&quot;&gt;</span><br><span class="line">            &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;password&quot;&gt;</span><br><span class="line">            &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;cn.itcast.pojo&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;cn.itcast.mapper&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>step11:springmvc的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=&quot;cn.itcast.controller&quot;&gt;</span><br><span class="line">        &lt;context:include-filter type=&quot;annotation&quot;</span><br><span class="line">                                expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line">    &lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>step12:最后是list界面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot;  prefix=&quot;c&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;table align=&quot;center&quot; border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">     &lt;/tr&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">         &lt;c:forEach items=&quot;$&#123;cs&#125;&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">         &lt;/c:forEach&gt;</span><br><span class="line">     &lt;/tr&gt;</span><br><span class="line"> &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>完毕。　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要回顾之前做过的关于ssm项目的过程，顺便复习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤如下&lt;/strong&gt;&lt;br&gt;　　step1:使用IDEA创建一个maven webapp项目，名称为test-ssm。&lt;br&gt;　　&lt;br&gt;　　step2:建立数据库和表,数据库名
      
    
    </summary>
    
    
      <category term="ssm" scheme="http://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>mybatis面试题</title>
    <link href="http://yoursite.com/2017/10/08/mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/08/mybatis面试题/</id>
    <published>2017-10-08T03:18:07.000Z</published>
    <updated>2018-12-24T03:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.#{}和${}的区别是什么？</p><p>  <code>${}</code>是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc.Driver。#{}是sql的参数占位符，Mybatis会将sql中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法，按序给sql的?号占位符设置参数值，比如ps.setInt(0, parameterValue)，#{item.name}的取值方式为使用反射从参数对象中获取item对象的name属性值，相当于param.getItem().getName()。</p><p> 2.最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？<br> 　　Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement的id值，接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：<code>com.mybatis3.mappers.StudentDao.findStudentById</code>，可以唯一找到namespace为<code>com.mybatis3.mappers.StudentDao</code>下面<code>id = findStudentById</code>的<code>MappedStatement</code>。在Mybatis中，每一个<code>&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;</code>标签，都会被解析为一个<code>MappedStatement</code>对象。<br>   Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。</p><p>　　Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。</p><p> 3.Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？<br>　　不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.#{}和${}的区别是什么？&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;${}&lt;/code&gt;是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc.Driver。#{}是sql的
      
    
    </summary>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>springMVC面试题</title>
    <link href="http://yoursite.com/2017/10/08/springMVC%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/08/springMVC面试题/</id>
    <published>2017-10-08T02:56:53.000Z</published>
    <updated>2018-12-25T01:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.SpringMVC工作原理：<br>　　 1.客户端发送请求到DispatcherServlet<br>　　 2.DispatcherServlet查询handlerMapping找到处理请求的Controller<br>　　 3.Controller调用业务逻辑后，返回ModelAndView<br>　　4.DispatcherServlet查询ModelAndView，找到指定视图<br>　　5.视图将结果返回到客户端<br>　　<br>２.SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决？<br>　　是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。<br>　　<br>３.SpingMvc中的控制器的注解一般用那个,有没有别的注解可以替代？<br>　　一般用@Conntroller注解,表示是表现层,不能用用别的注解代替.<br>　　<br>４. @RequestMapping注解用在类上面有什么作用？<br>　　 是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>　　<br>５.怎么样把某个请求映射到特定的方法上面？<br>　　直接在方法上面加上注解@RequestMapping,并且在这个注解里面写上要拦截的路径。<br>　　<br>６.如果在拦截请求中,我想拦截get方式提交的方法,怎么配置？<br>　　可以在@RequestMapping注解里面加上method=RequestMethod.GET。<br>　　<br>７.我想在拦截的方法里面得到从前台传入的参数,怎么得到？<br>　　直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样。<br>　　<br>８.如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？<br>　　直接在方法中声明这个对象,SpringMvc就自动会把属性赋值到这个对象里面。<br>　　<br>９.SpringMvc中函数的返回值是什么？<br>　　返回值可以有很多类型,有String, ModelAndView,当一般用String比较好。<br>　　<br>１０.SpringMVC怎么样设定重定向和转发的？<br>　　在返回值前面加”forward:”就可以让结果转发,譬如”forward:user.do?name=method4” 在返回值前面加”redirect:”就可以让返回值重定向,譬如”redirect:<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.SpringMVC工作原理：&lt;br&gt;　　 1.客户端发送请求到DispatcherServlet&lt;br&gt;　　 2.DispatcherServlet查询handlerMapping找到处理请求的Controller&lt;br&gt;　　 3.Controller调用业务逻辑后，返
      
    
    </summary>
    
    
      <category term="springmvc" scheme="http://yoursite.com/tags/springmvc/"/>
    
  </entry>
  
</feed>
